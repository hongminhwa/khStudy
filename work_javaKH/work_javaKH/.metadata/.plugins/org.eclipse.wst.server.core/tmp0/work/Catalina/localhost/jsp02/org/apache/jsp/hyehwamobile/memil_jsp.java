/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-04-20 07:26:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.hyehwamobile;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memil_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"../include/jquery-3.6.3.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\" />\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-1.11.1.min.js\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div data-role=\"page\" id=\"page1\"> \r\n");
      out.write("<div data-role=\"header\"> \r\n");
      out.write("<a href=\"Index.jsp\" data-icon=\"home\">홈</a> \r\n");
      out.write("<h1>탕(전골,찌게,국물류)</h1>\r\n");
      out.write("</div>\r\n");
      out.write("<div data-role=\"content\"> \r\n");
      out.write("<div class=\"ui-grid-a\"> \r\n");
      out.write("<div class=\"ui-block-a\"> \r\n");
      out.write("<h1>메밀향그집</h1>\r\n");
      out.write("<p>주소 서울종로구 대학로11길 </p>\r\n");
      out.write("<p>주차공간 없음</p>\r\n");
      out.write("<p>(4호선)혜화역 1번출구 300m</p>\r\n");
      out.write("<p>전화번호 02-745-3681</p>\r\n");
      out.write("<p>영업시간 11:00~22:00</p>\r\n");
      out.write("<p>브레이크타임 15:00~16:30</p>\r\n");
      out.write("<p>라스트오더 21:00</p>\r\n");
      out.write("<h4>메뉴</h4> \r\n");
      out.write("  <p>폭치순 (2인) 30000원 (3인)40000원 (4인)50000원</p>\r\n");
      out.write("  <p> 폭탄치즈순살입니다.짜파게티가 포함된 \r\n");
      out.write("      세트메뉴 입니다. 멥기 조절 가능합니다</p>\r\n");
      out.write("   <p>매콤 닭볶음탕(2인) 25000원(3인)35000원 (4인)45000원 (맵기조절가능)</p>\r\n");
      out.write("    <p>치즈닭볶음탕(2인)28000원 (3~4인)40000원</p>\r\n");
      out.write("    <p>카레닭볶음탕(2인)25000원 (3인)35000원(4인)45000원</p>\r\n");
      out.write("    <p>볶음밥(추가사리) 2000원 </p>\r\n");
      out.write("    <p>메밀전 5000원</p>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"ui-block-b\"> \r\n");
      out.write("   <img src=\"../korea/memil.jpg\"> \r\n");
      out.write(" </div>\r\n");
      out.write("</div>\r\n");
      out.write("<hr> \r\n");
      out.write("<div class=\"ui-grid-a\">\r\n");
      out.write("<div class=\"ui-block-a\"> \r\n");
      out.write("<p>한자리에서 10년 이상 운영중이며 많은 분들께서 인정해주신 곳 메밀향그집입니다.</p>\r\n");
      out.write("<p>직접오셔서 메밀향그집의 시그니처메뉴 폭치순을 한번 드셔보세요!</p>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"ui-block-b\"> \r\n");
      out.write("<a href=\"https://place.map.kakao.com/15716957https://place.map.kakao.com/15716957\"\r\n");
      out.write("data-role=\"button\" data-icon=\"location\">카카오맵에서 찾기</a>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<hr> \r\n");
      out.write("<div>\r\n");
      out.write("<form>\r\n");
      out.write("<label for=\"select-choice\">\r\n");
      out.write("<h2> 사용자 평가</h2>\r\n");
      out.write("</label>\r\n");
      out.write("<select name=\"select-choice\" id=\"select-choice\" data-native-menu=\"false\" data-theme=\"b\"> \r\n");
      out.write("<option value=\"one\">Bad</option>\r\n");
      out.write("<option value=\"two\">Good</option>\r\n");
      out.write("<option value=\"three\">Great</option>\r\n");
      out.write("<option value=\"four\">Perfect</option>  \r\n");
      out.write("</select>\r\n");
      out.write("</form>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("<div data-role=\"footer\">  \r\n");
      out.write(" <h4>Copyright &copy; 2023 hongminhwa</h4>\r\n");
      out.write("</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
